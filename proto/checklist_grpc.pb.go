// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/checklist.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChecklistService_CreateTask_FullMethodName   = "/proto.ChecklistService/CreateTask"
	ChecklistService_ListTasks_FullMethodName    = "/proto.ChecklistService/ListTasks"
	ChecklistService_DeleteTask_FullMethodName   = "/proto.ChecklistService/DeleteTask"
	ChecklistService_MarkTaskDone_FullMethodName = "/proto.ChecklistService/MarkTaskDone"
)

// ChecklistServiceClient is the client API for ChecklistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChecklistServiceClient interface {
	// Для POST /create
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error)
	// Для GET /list
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// Для DELETE /delete
	DeleteTask(ctx context.Context, in *TaskActionRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	// Для PUT /done
	MarkTaskDone(ctx context.Context, in *TaskActionRequest, opts ...grpc.CallOption) (*Task, error)
}

type checklistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChecklistServiceClient(cc grpc.ClientConnInterface) ChecklistServiceClient {
	return &checklistServiceClient{cc}
}

func (c *checklistServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, ChecklistService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, ChecklistService_ListTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) DeleteTask(ctx context.Context, in *TaskActionRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, ChecklistService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checklistServiceClient) MarkTaskDone(ctx context.Context, in *TaskActionRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, ChecklistService_MarkTaskDone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChecklistServiceServer is the server API for ChecklistService service.
// All implementations must embed UnimplementedChecklistServiceServer
// for forward compatibility.
type ChecklistServiceServer interface {
	// Для POST /create
	CreateTask(context.Context, *CreateTaskRequest) (*Task, error)
	// Для GET /list
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// Для DELETE /delete
	DeleteTask(context.Context, *TaskActionRequest) (*DeleteTaskResponse, error)
	// Для PUT /done
	MarkTaskDone(context.Context, *TaskActionRequest) (*Task, error)
	mustEmbedUnimplementedChecklistServiceServer()
}

// UnimplementedChecklistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChecklistServiceServer struct{}

func (UnimplementedChecklistServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedChecklistServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedChecklistServiceServer) DeleteTask(context.Context, *TaskActionRequest) (*DeleteTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedChecklistServiceServer) MarkTaskDone(context.Context, *TaskActionRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkTaskDone not implemented")
}
func (UnimplementedChecklistServiceServer) mustEmbedUnimplementedChecklistServiceServer() {}
func (UnimplementedChecklistServiceServer) testEmbeddedByValue()                          {}

// UnsafeChecklistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChecklistServiceServer will
// result in compilation errors.
type UnsafeChecklistServiceServer interface {
	mustEmbedUnimplementedChecklistServiceServer()
}

func RegisterChecklistServiceServer(s grpc.ServiceRegistrar, srv ChecklistServiceServer) {
	// If the following call pancis, it indicates UnimplementedChecklistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChecklistService_ServiceDesc, srv)
}

func _ChecklistService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChecklistService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChecklistService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChecklistService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).DeleteTask(ctx, req.(*TaskActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChecklistService_MarkTaskDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChecklistServiceServer).MarkTaskDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChecklistService_MarkTaskDone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChecklistServiceServer).MarkTaskDone(ctx, req.(*TaskActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChecklistService_ServiceDesc is the grpc.ServiceDesc for ChecklistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChecklistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChecklistService",
	HandlerType: (*ChecklistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _ChecklistService_CreateTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _ChecklistService_ListTasks_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _ChecklistService_DeleteTask_Handler,
		},
		{
			MethodName: "MarkTaskDone",
			Handler:    _ChecklistService_MarkTaskDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/checklist.proto",
}
